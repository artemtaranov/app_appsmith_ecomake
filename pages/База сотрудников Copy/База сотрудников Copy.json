{
  "unpublishedPage": {
    "name": "База сотрудников Copy",
    "slug": "copy",
    "layouts": [
      {
        "viewMode": false,
        "dsl": {
          "widgetName": "MainContainer",
          "backgroundColor": "none",
          "rightColumn": 1224,
          "snapColumns": 64,
          "detachFromLayout": true,
          "widgetId": "0",
          "topRow": 0,
          "bottomRow": 1000,
          "containerStyle": "none",
          "snapRows": 83,
          "parentRowSpace": 1,
          "type": "CANVAS_WIDGET",
          "canExtend": true,
          "version": 87,
          "minHeight": 850,
          "parentColumnSpace": 1,
          "dynamicBindingPathList": [],
          "leftColumn": 0
        },
        "layoutOnLoadActions": [
          [
            {
              "id": "База сотрудников Copy_list_employee_status",
              "name": "list_employee_status",
              "confirmBeforeExecute": false,
              "pluginType": "DB",
              "jsonPathKeys": [],
              "timeoutInMillisecond": 10000
            }
          ],
          [
            {
              "id": "База сотрудников Copy_Employee.all_employees",
              "name": "Employee.all_employees",
              "collectionId": "База сотрудников Copy_Employee",
              "confirmBeforeExecute": false,
              "pluginType": "JS",
              "jsonPathKeys": [
                "async function () {\n  get_all_employees.run().then(function (empl) {\n    storeValue(\"all_employees\", empl);\n    let all_empl = empl.reduce((acc, employee) => {\n      acc[employee.id] = employee;\n      return acc;\n    }, {});\n    storeValue(\"all_employees_by_id\", all_empl);\n    let simplifiedEmpl = empl.map(employee => ({\n      id: employee.id,\n      short_name: employee.short_name || '',\n      surname: employee.surname || '',\n      name: employee.name || '',\n      patronymic: employee.patronymic || '',\n      position: employee.position || '',\n      employee_status: employee.employee_status || '',\n      legal_entity: employee.legal_entity || '',\n      contract_type: employee.contract_type || '',\n      hiring_date: employee.hiring_date || '',\n      telegram: employee.telegram || ''\n    }));\n    storeValue(\"list_all_employees_storage\", simplifiedEmpl);\n  });\n}"
              ],
              "timeoutInMillisecond": 10000
            },
            {
              "id": "База сотрудников Copy_Employee.getPositionsHierarchy",
              "name": "Employee.getPositionsHierarchy",
              "collectionId": "База сотрудников Copy_Employee",
              "confirmBeforeExecute": false,
              "pluginType": "JS",
              "jsonPathKeys": [
                "async function () {\n  try {\n    const res = await list_positions.run();\n    if (res && res.length > 0) {\n      const buildHierarchy = (positions, parentId = null) => {\n        return positions.filter(position => position.parent_id === parentId).map(position => ({\n          label: position.title,\n          value: position.id,\n          children: buildHierarchy(positions, position.id)\n        }));\n      };\n      return buildHierarchy(res);\n    } else {\n      console.error('No data received or data format is incorrect');\n      return [];\n    }\n  } catch (error) {\n    console.error('Error fetching position hierarchy:', error);\n    return [];\n  }\n}"
              ],
              "timeoutInMillisecond": 10000
            },
            {
              "id": "База сотрудников Copy_JSObject1.getEnumValuesEmployees",
              "name": "JSObject1.getEnumValuesEmployees",
              "collectionId": "База сотрудников Copy_JSObject1",
              "confirmBeforeExecute": false,
              "pluginType": "JS",
              "jsonPathKeys": [
                "async function () {\n  try {\n    const res = await get_enum_list.run({\n      db: \"ecomake\"\n    });\n    console.log(res);\n    if (res && res.length > 0) {\n      JSObject1.myVar1 = res.reduce((acc, {TABLE_NAME, COLUMN_NAME, enum_values}) => {\n        let enumValues = enum_values.replace(/^enum\\('/, \"\").replace(/'\\)$/, \"\").split(\"','\");\n        if (!acc[TABLE_NAME]) {\n          acc[TABLE_NAME] = {};\n        }\n        acc[TABLE_NAME][COLUMN_NAME] = enumValues.map(value => ({\n          label: value,\n          value: value\n        }));\n        return acc;\n      }, {});\n      console.log(JSObject1.myVar1);\n      return JSObject1.myVar1;\n    } else {\n      console.error('No data received or data format is incorrect');\n      return {};\n    }\n  } catch (error) {\n    console.error('Error fetching enum values:', error);\n    return {};\n  }\n}"
              ],
              "timeoutInMillisecond": 10000
            }
          ],
          [
            {
              "id": "База сотрудников Copy_list_employee",
              "name": "list_employee",
              "confirmBeforeExecute": false,
              "pluginType": "DB",
              "jsonPathKeys": [
                "\n\t\t\tstatus_employee.selectedOptionValues.length>0?\n\t\t\tstatus_employee.selectedOptionValues.join('\\', \\'') : status_employee.options.map(item => item.value).join('\\', \\'') ",
                "search_employee_text.text"
              ],
              "timeoutInMillisecond": 10000
            }
          ]
        ],
        "layoutOnLoadActionErrors": [],
        "validOnPageLoadActions": true,
        "id": "База сотрудников Copy",
        "deleted": false,
        "policies": [],
        "userPermissions": []
      }
    ],
    "userPermissions": [],
    "policies": [],
    "isHidden": false
  },
  "deleted": false,
  "gitSyncId": "65454d4cfee2632516ef478c_6560a9b8a373f83140ba2db3"
}