{
  "unpublishedPage": {
    "name": "База сотрудников",
    "slug": "",
    "customSlug": "registry-employee",
    "layouts": [
      {
        "viewMode": false,
        "dsl": {
          "widgetName": "MainContainer",
          "backgroundColor": "none",
          "rightColumn": 1224,
          "snapColumns": 64,
          "detachFromLayout": true,
          "widgetId": "0",
          "topRow": 0,
          "bottomRow": 910,
          "containerStyle": "none",
          "snapRows": 83,
          "parentRowSpace": 1,
          "type": "CANVAS_WIDGET",
          "canExtend": true,
          "version": 87,
          "minHeight": 850,
          "parentColumnSpace": 1,
          "dynamicBindingPathList": [],
          "leftColumn": 0
        },
        "layoutOnLoadActions": [
          [
            {
              "id": "База сотрудников_Employee.getPositionsHierarchy",
              "name": "Employee.getPositionsHierarchy",
              "collectionId": "65758b0160fc577f16863efc",
              "confirmBeforeExecute": false,
              "pluginType": "JS",
              "jsonPathKeys": [
                "async function () {\n  try {\n    const res = await list_positions.run();\n    if (res && res.length > 0) {\n      const buildHierarchy = (positions, parentId = null) => {\n        return positions.filter(position => position.parent_id === parentId).map(position => ({\n          label: position.title,\n          value: position.id,\n          children: buildHierarchy(positions, position.id)\n        }));\n      };\n      return buildHierarchy(res);\n    } else {\n      console.error('No data received or data format is incorrect');\n      return [];\n    }\n  } catch (error) {\n    console.error('Error fetching position hierarchy:', error);\n    return [];\n  }\n}"
              ],
              "timeoutInMillisecond": 10000
            },
            {
              "id": "База сотрудников_JSObject1.getEnumValuesEmployees",
              "name": "JSObject1.getEnumValuesEmployees",
              "collectionId": "База сотрудников_JSObject1",
              "confirmBeforeExecute": false,
              "pluginType": "JS",
              "jsonPathKeys": [
                "async function () {\n  try {\n    const res = await get_enum_list.run({\n      db: \"ecomake\"\n    });\n    console.log(res);\n    if (res && res.length > 0) {\n      JSObject1.myVar1 = res.reduce((acc, {TABLE_NAME, COLUMN_NAME, enum_values}) => {\n        let enumValues = enum_values.replace(/^enum\\('/, \"\").replace(/'\\)$/, \"\").split(\"','\");\n        if (!acc[TABLE_NAME]) {\n          acc[TABLE_NAME] = {};\n        }\n        acc[TABLE_NAME][COLUMN_NAME] = enumValues.map(value => ({\n          label: value,\n          value: value\n        }));\n        return acc;\n      }, {});\n      console.log(JSObject1.myVar1);\n      return JSObject1.myVar1;\n    } else {\n      console.error('No data received or data format is incorrect');\n      return {};\n    }\n  } catch (error) {\n    console.error('Error fetching enum values:', error);\n    return {};\n  }\n}"
              ],
              "timeoutInMillisecond": 10000
            },
            {
              "id": "База сотрудников_list_employee_status",
              "name": "list_employee_status",
              "confirmBeforeExecute": false,
              "pluginType": "DB",
              "jsonPathKeys": [],
              "timeoutInMillisecond": 10000
            }
          ]
        ],
        "layoutOnLoadActionErrors": [],
        "validOnPageLoadActions": true,
        "id": "База сотрудников",
        "deleted": false,
        "policies": [],
        "userPermissions": []
      }
    ],
    "userPermissions": [],
    "policies": [],
    "isHidden": false
  },
  "deleted": false,
  "gitSyncId": "65454d4cfee2632516ef478c_6560a9b8a373f83140ba2db3"
}